import logging
from uuid import uuid4
from datetime import datetime

from fastapi.testclient import TestClient
from starlette import status

from main import Task, app
from db_connection import TblTasks, session_scope

client = TestClient(app)

random_task_id = str(uuid4())


def test_get_tasks():
    response = client.get("/tasks")
    logging.info(response.json())

    assert response.status_code == status.HTTP_200_OK


def test_add_task():
    task_test = Task(
        id=random_task_id,
        title="generated by test module test_main.py",
        content="test content",
        deadline=datetime.now(),
    )
    logging.info(task_test.__repr__())

    response = client.post("/tasks", data=task_test.json())
    logging.info(response.json())

    assert response.status_code == status.HTTP_200_OK


def test_add_task_is_task_created():
    with session_scope() as session:
        query = session.query(TblTasks.id).where(TblTasks.id == random_task_id).first()
        assert query


def test_delete_task():
    response = client.delete(f"/tasks/{random_task_id}")
    assert response.status_code == status.HTTP_204_NO_CONTENT


def test_delete_task_is_task_deleted():
    with session_scope() as session:
        query = session.query(TblTasks.id).where(TblTasks.id == random_task_id).first()
        assert not query
